#include <iostream>
#include <vector>
#include <algorithm>

#define int long long
using namespace std;
typedef pair<int, int> pii;


int w[65] = {111111, 111110, 111101, 111100, 111011, 111010, 111001, 111000, 110111, 110110, 110101, 110100, 110011, 110010, 110001, 110000, 101111, 101110, 101101, 101100, 101011, 101010, 101001, 101000, 100111, 100110, 100101, 100100, 100011, 100010, 100001, 100000, 11111, 11110, 11101, 11100, 11011, 11010, 11001, 11000, 10111, 10110, 10101, 10100, 10011, 10010, 10001, 10000, 1111, 1110, 1101, 1100, 1011, 1010, 1001, 1000, 111, 110, 101, 100, 11, 10, 1};

int qmi(int x, int a)
{
    int tmp = 1, ans = 1;
    while(a)
    {
        if(a & 1)
            ans *= x;
            // 说明这一位上面有
        x *= x;
        a >>= 1;
    }
    return ans;
}

signed main()
{
    int n; cin >> n;
    // 然后要我们组成n
    // 直接想想打表
    vector<int> x;
    // for(int i = 0 ; n ; i ++)
    // {
    //     if(n / w[i])
    //     {
    //         // 当他还除的下w[i]
    //         for(int j = 0 ; j < n / w[i] ; j ++)
    //         {
    //             x.push_back(w[i]);
    //             ans++;
    //         }
    //         n %= w[i];
    //     }// 最后都会直接用1填满，因为如果能用11，那就不用一个10和一个11
    // }
    // 错误的打表
    // 一个数可以一位一位的看
    // 915
    // 因为最后是用1或者0组成的数字，最高位一定有9个1，第二位一定有1个1，第三位一定有5个1，因为这样的1和0组合不管怎样组合起来得到的都是915
    // 相当于把9个100，1个10， 5个1就可以组合成915，但是可能不是最少个数，所以我们还可以再组合一下
    // 因为这三个各取一个组合起来得到的还是合法的数
    // 然后这样的就是最少的个数
    
    // 所以全部得到每一位的数，然后每次遍历看这个位置存不存在数，如果存在这个位置就要加1，如果不存在就是0
    int ans = 0;
    while(n)
    {
        x.push_back(n % 10);
        ans = max(ans, n % 10);
        n /= 10;
    }
    // 得到了每一位，再x数组中的顺序就是从低位到高位
    // 如果这一位是是非0，那么就加上这位的10^i
    // 最多遍历9次，每次最多循环 n的位数 次
    // cout << qmi(2, 8) << endl;
    cout << ans << endl;
    for(int i = 0 ; i < ans ; i ++)
    {
        int tmp = 0;
        for(int j = 0 ; j < x.size() ; j ++)
        {
            if(x[j]) {
                tmp += qmi(10, j);
                x[j]--;
            }
        }
        cout << tmp << " ";
    }
    
    return 0;
}
